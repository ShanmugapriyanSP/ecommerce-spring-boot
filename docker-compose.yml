---
version: '3.8'
services:
  ## Postgres Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order_service
      POSTRGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    volumes:
      - ./database/postgres-order:/data/postgres
    expose:
      - '5431'
    ports:
      - '5431:5431'
    command: -p 5431
    restart: always

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory_service
      POSTRGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    volumes:
      - ./database/postgres-inventory:/data/postgres
    ports:
      - '5432:5432'
    restart: always

  ## MongoDB Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - '27017:27017'
    expose:
      - '27017'
    volumes:
      - ./database/mongo-data:/data/db

  ## KeyCloak MySQL Config
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8.0
    volumes:
      - ./database/mysql-keycloak:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  ## KeyCloak Service Config
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.2
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  ## KAFKA!!!
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "29092:9092"
    expose:
      - '29092'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - '9411:9411'

  discovery-service:
    container_name: discovery-service
    image: spshan/discovery-service:latest
    ports:
      - '8761:8761'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway-service:
    container_name: api-gateway-service
    image: spshan/api-gateway:latest
    ports:
      - '8181:8080'
    expose:
      - '8181'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    depends_on:
      - zipkin
      - discovery-service
      - keycloak

  product-service:
    container_name: product-service
    image: spshan/product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - discovery-service
      - keycloak

  order-service:
    container_name: order-service
    image: spshan/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order_service
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-service
      - api-gateway-service

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: spshan/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory_service
    depends_on:
      - postgres-inventory
      - discovery-service
      - api-gateway-service
      - zipkin

  notification-service:
    container_name: notification-service
    image: spshan/notification-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-service
      - api-gateway-service

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password

